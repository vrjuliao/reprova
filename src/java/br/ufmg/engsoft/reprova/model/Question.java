package br.ufmg.engsoft.reprova.model;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;
import org.bson.Document;
import br.ufmg.engsoft.reprova.model.difficulty.DifficultyFactory;

/**
 * The question type.
 */
public class Question {
    /**
     * The id of the question. When null, the id will be automatically generated by
     * the database.
     */
    public final String id;
    /**
     * The theme of the question. Mustn't be null nor empty.
     */
    public final String theme;
    /**
     * The description of the question. Mustn't be null nor empty.
     */
    public final String description;
    /**
     * The statement of the question. May be null or empty.
     */
    public final String statement;
    /**
     * The record of the question per semester per class. Mustn't be null, may be
     * empty.
     */
    public final Map<Semester, Map<String, Map<String, Float>>> record;
    /**
     * Whether the question is private.
     */
    public final boolean pvt;
    /**
     * The difficulty of the question. May have different groupings.
     */
    public String difficulty;
    /**
     * The difficulty's possible values.
     */
    private final List<String> difficultyGroup;
    /**
     * The estimated time in minutes for the question to be solved
     */
    public final Integer estimatedTime;

    /**
     * Available choices for question, used if the multiple choice feature is
     * enabled
     */
    private final Map<String, Boolean> choices;
    /**
     * Available statistics for question
     */
    private final Map<String, Double> statistics;

    /**
     * Builder for Question.
     */
    public static class Builder {
        protected String id;
        protected String theme;
        protected String description;
        protected String statement;
        protected Map<Semester, Map<String, Map<String, Float>>> record;
        protected boolean pvt = true;
        protected Integer estimatedTime;
        protected String difficulty;
        protected List<String> difficultyGroup;
        protected Map<String, Boolean> choices;
        protected Map<String, Double> statistics;

        public Builder id(String id) {
            this.id = id;
            return this;
        }

        public Builder theme(String theme) {
            this.theme = theme;
            return this;
        }

        public Builder description(String description) {
            this.description = description;
            return this;
        }

        public Builder statement(String statement) {
            this.statement = statement;
            return this;
        }

        public Builder record(Map<Semester, Map<String, Map<String, Float>>> record) {
            this.record = record;
            return this;
        }

        public Builder pvt(boolean pvt) {
            this.pvt = pvt;
            return this;
        }

        public Builder choices(Map<String, Boolean> choices) {
            this.choices = choices;
            return this;
        }

        public Builder estimatedTime(int estimatedTime) {
            this.estimatedTime = estimatedTime;
            return this;
        }

        public Builder difficulty(String difficulty) {
            this.difficulty = difficulty;
            return this;
        }

        public Builder statistics(Map<String, Double> statistics) {
            this.statistics = statistics;
            return this;
        }

        public Builder difficultyGroup(List<String> difficulty) {
            this.difficultyGroup = difficulty;
            return this;
        }

        /**
         * Calculate the difficulty based on the record and the difficultyGroup. Should
         * be called when changes are made to the record.
         */
        public Question build() {
            if (theme == null) {
                throw new IllegalArgumentException("theme mustn't be null");
            }

            if (theme.isEmpty()) {
                throw new IllegalArgumentException("theme mustn't be empty");
            }

            if (description == null) {
                throw new IllegalArgumentException("description mustn't be null");
            }

            if (description.isEmpty()) {
                throw new IllegalArgumentException("description mustn't be empty");
            }

            if (this.record == null) {
                this.record = new HashMap<Semester, Map<String, Map<String, Float>>>();
            } else {
                // All inner maps mustn't be null:
                for (var entry : this.record.entrySet()) {
                    if (entry.getValue() == null) {
                        throw new IllegalArgumentException("inner record mustn't be null");
                    }
                }
            }

            if (this.statistics == null && Environments.getInstance().getEnableQuestionStatistics()) {
                this.statistics = new HashMap<String, Double>();
            }

            if (!Environments.getInstance().getEnableEstimatedTime()) {
                this.estimatedTime = null;
            }

            if (!Environments.getInstance().getEnableMultipleChoice()) {
                this.choices = null;
            }

            Environments environments = Environments.getInstance();

            if (environments.getDifficultyGroup() != 0) {
                // TODO validate possible values (3 and 5)
                int valueDifficultyGroup = environments.getDifficultyGroup();
                this.difficultyGroup = new DifficultyFactory().getDifficulty(valueDifficultyGroup).getDifficulties();
            } else {
                this.difficultyGroup = null;
            }

            return new Question(this.id, this.theme, this.description, this.statement, this.record, this.pvt,
                    this.estimatedTime, this.difficulty, this.difficultyGroup, this.choices, this.statistics);
        }
    }

    /**
     * Protected constructor, should only be used by the builder.
     */
    protected Question(String id, String theme, String description, String statement,
            Map<Semester, Map<String, Map<String, Float>>> record, boolean pvt, Integer estimatedTime,
            String difficulty, List<String> difficultyGroup, Map<String, Boolean> choices,
            Map<String, Double> statistics) {
        this.id = id;
        this.theme = theme;
        this.description = description;
        this.statement = statement;
        this.record = record;
        this.pvt = pvt;
        this.estimatedTime = estimatedTime;
        this.difficulty = difficulty;
        this.difficultyGroup = difficultyGroup;
        this.choices = choices;
        this.statistics = statistics;
    }

    public Map<String, Boolean> getChoices() {
        return this.choices;
    }

    public Map<String, Double> getStatistics() {
        this.statistics.put("average", QuestionCalculations.calculateGradeAverage(this.record));
        this.statistics.put("Std Deviation", QuestionCalculations.calculateGradeStandardDeviation(this.record));
        this.statistics.put("median", QuestionCalculations.calculateGradeMedian(this.record));
        return this.statistics;
    }

    /**
     * Calculate the difficulty based on the record and the difficultyGroup. Should
     * be called when changes are made to the record.
     */
    public void calculateDifficulty() {
        if (this.difficultyGroup == null) {
            return;
        }

        double avg = QuestionCalculations.calculateGradeAverage(this.record);

        int difficultyIndex = new DifficultyFactory().getDifficulty(this.difficultyGroup.size())
                .getDifficultyGroup(avg);
        this.difficulty = this.difficultyGroup.get(difficultyIndex);
    }

    /**
     * Equality comparison. Although this object has an id, equality is checked on
     * all fields.
     */
    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }

        if (!(obj instanceof Question)) {
            return false;
        }

        var question = (Question) obj;

        return this.id.equals(question.id) && this.theme.equals(question.theme)
                && this.description.equals(question.description) && this.statement.equals(question.statement)
                && this.record.equals(question.record) && this.pvt == question.pvt
                && this.difficulty.equals(question.difficulty);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.id, this.theme, this.description, this.statement, this.record, this.pvt,
                this.estimatedTime, this.difficulty);
    }

    /**
     * Convert a Question to String for visualization purposes.
     */
    @Override
    public String toString() {
        var builder = new StringBuilder();

        builder.append("Question:\n");
        builder.append("  id: " + this.id + "\n");
        builder.append("  theme: " + this.theme + "\n");
        builder.append("  desc: " + this.description + "\n");
        builder.append("  record: " + this.record + "\n");
        builder.append("  pvt: " + this.pvt + "\n");
        builder.append("  estimatedTime: " + this.estimatedTime + "\n");
        builder.append("  difficulty: " + this.difficulty + "\n");
        builder.append("  difficultyGroup: " + this.difficultyGroup + "\n");
        // TODO add choices

        if (this.statement != null) {
            builder.append("  head: " + this.statement.substring(0, Math.min(this.statement.length(), 50)) + "\n");
        }

        return builder.toString();
    }

    /**
     * Helper function to build Question
     */
    public Question buildQuestion() {
        if (Environments.getInstance().getEnableEstimatedTime()) {
            return new Question.Builder().theme(this.theme).description(this.description).statement(this.statement)
                    .estimatedTime(this.estimatedTime).record(this.record).pvt(this.pvt).build();
        }
        return new Question.Builder().theme(this.theme).description(this.description).statement(this.statement)
                .record(this.record).pvt(this.pvt).build();
    }

    public Document createDoc() {
        calculateDifficulty();
        Map<String, Object> record = record2();
        Document doc = new Document().append("theme", this.theme).append("description", this.description)
                .append("statement", this.statement).append("record", record == null ? null : new Document(record))
                .append("pvt", this.pvt);
        if (Environments.getInstance().getEnableEstimatedTime()) {
            doc = doc.append("estimatedTime", this.estimatedTime);
        }
        if (Environments.getInstance().getDifficultyGroup() != 0) {
            doc = doc.append("difficulty", this.difficulty);
        }
        if (Environments.getInstance().getEnableMultipleChoice()) {
            doc = doc.append("choices", getChoices());
        }
        if (Environments.getInstance().getEnableQuestionStatistics()) {
            doc = doc.append("statistics", getStatistics());
        }
        return doc;
    }

    private Map<String, Object> record2() {
        Map<String, Object> record = null;
        if (this.record != null) {
            record = this.record.entrySet().stream()
                    .collect(Collectors.toMap(e -> e.getKey().toString(), Map.Entry::getValue));
        }
        return record;
    }

    public Map<String, Object> record() {
        Map<String, Object> record = null;
        if (this.record != null) {
            record = this.record.entrySet().stream()
                    .collect(Collectors.toMap(e -> e.getKey().toString(), Map.Entry::getValue));
        }
        return record;
    }
}
